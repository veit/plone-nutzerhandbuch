[transmogrifier]
pipeline =
    webcrawler
    typerecognitor
    drop-resources
    drop-unneeded-html
    templatefinder
    set-folder-default-page
    makedoc1
    title_from_link
    relinker
    treeserializer
    encode-all
    mark-image-folders-to-navigation-exclusion
    mark-container-remote-content-type
    mark-page-remote-content-type
    mark-remote-folder-to-be-cleaned
    mark-remote-root-to-be-cleaned
    topublish
    ploneuploader
    schemaupdater
    publish
    excludefromnavigation
    cleanremotefolder

[webcrawler]
blueprint = transmogrify.webcrawler
site_url  = %s
ignore =
	cgi-bin
	javascript:
	_static
	_sources
	genindex\.html
	search\.html
	saesrchindex\.js

# Do not consider media files in Sphinx documentation tree
[drop-resources]
blueprint = collective.transmogrifier.sections.condition
condition: python:item.get('_mimetype') not in ['application/x-javascript','text/css','text/plain','application/x-java-byte-code'] and item.get('_path','').split('.')[-1] not in ['class']

# Do not consider HTML files which are unndeeded in Plone
# getindex.html is Sphinx's automatically generated index and it is not needed with this manual
[drop-unneeded-html]
blueprint = collective.transmogrifier.sections.condition
condition: python:not ("genindex" in item.get("_path","") or "search.html" in item.get("_path","") or "_static" in item.get("_path", ""))

[treeserializer]
blueprint = transmogrify.pathsorter
default_pages = index.html
    index

[typerecognitor]
blueprint = transmogrify.webcrawler.typerecognitor


[relinker]
blueprint = transmogrify.siteanalyser.relinker
link_expr = python:item['_path'].endswith('.html') and item['_path'][:-5] or item['_path']

[templatefinder]
blueprint = transmogrify.htmlcontentextractor
1-title = text //div[@class='body']//h1[1]
# Permalinks are Sphinx's on-hover makers that are not used in Plone. We have this dummy rule here to parse 
# them out from body so that they do not corrupt "text" field
1-permalink = text //div[@class='body']//a[@class='headerlink']
1-text = html //div[@class='body']
1-description = optional //div[contains(@class,'admonition-description')]//p[@class='last']
                     //div[contains(@class,'admonition-description')]

[makedoc1]
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
value = string:Document
condition = python:item.get("_mimetype") in ["text/html"]

[title_from_link]
blueprint = transmogrify.siteanalyser.title
ignore =
	click
	read more

# Set hint so that that directiories are converted to HelpCenterReferenceManualSection
# Plone content type when uploaded
[mark-container-remote-content-type]
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
value = string:HelpCenterReferenceManualSection
condition = python:item.get('_type')=='Folder' and not options.get('disabled')

# Set hint so that that .HTML files are converted to HelpCenterLeafPage
# Plone content type when uploaded
[mark-page-remote-content-type]
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
value = string:HelpCenterLeafPage
condition = python:item.get('_type')=='Document' and not options.get('disabled')

# Hide remote images folder from the navigation tree,
# as images are refered only in <img src=""> 
[mark-image-folders-to-navigation-exclusion]
blueprint = collective.transmogrifier.sections.inserter
key = string:_exclude-from-navigation
value = python:True
condition = python:"images" in item.get("_path","") and item.get('_type')=='Folder' 

# All folderish content should be checked if they contain
# any items on the remote site which are not presented locally
[mark-remote-folder-to-be-cleaned]
blueprint = collective.transmogrifier.sections.inserter
key = string:_prune-folder
value = python:True
condition = python:(item.get('_type')=='HelpCenterReferenceManualSection' or item.get('_type')=='HelpCenterReferenceManual') and not options.get('disabled')

# Clean the root of the remote reference manual 
[mark-remote-root-to-be-cleaned]
blueprint = collective.transmogrifier.sections.inserter
key = string:_prune-folder
value = python:True
condition = python:(item.get('_root_item', None) == True)

# Set the workflow transition key hint which will be used publish the item.
# This value is later read by [publish] and we can have conditions
# to have different WF transitions for different content types 
# Note that images do not have workflow and they inherit
# permission settings of the parent container
[topublish]
blueprint = collective.transmogrifier.sections.inserter
key = string:_transitions
value = python:["publish"]
condition = python:item.get('_type') != 'Image' and not options.get('disabled')

[encode-all]
blueprint = collective.transmogrifier.sections.codec
keys =
   text
to = utf8

[localconstructor]
blueprint = transmogrify.webcrawler.cache
target = ploneout
output = ploneout

# Create remote item on Plone site
[ploneuploader]
blueprint = transmogrify.ploneremote.remoteconstructor
target=

# Update the remote item with new extracted content from Sphinx documentation
[schemaupdater]
blueprint = transmogrify.ploneremote.remoteschemaupdater
target = ${ploneuploader:target}

# Set index.html as the default page of the folder
#  Determines an item is a default page for a container if it has many links
#  to items in that container. 
[set-folder-default-page]
blueprint = transmogrify.siteanalyser.defaultpage

[makeattachments]
blueprint = transmogrify.siteanalyser.attach
condition = python: subitem.get('_type') in ['Image']
defaultpage = index-html

# Publish the uploaded documentation if not public yet
[publish]
blueprint = transmogrify.ploneremote.remoteworkflowupdater
transitions = submit publish
transitions-key = _transitions
target = ${ploneuploader:target}

# Hide items from the navigation
# (hints to which items should be hidden are set earlier in pipeline)
[excludefromnavigation]
blueprint = transmogrify.ploneremote.remotenavigationexcluder
target = ${ploneuploader:target}

# Delete objects which are on the remote site,
# but not in local copy
[cleanremotefolder]
blueprint = transmogrify.ploneremote.remoteprune
target = ${ploneuploader:target}

